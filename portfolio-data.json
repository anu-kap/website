{
  "personal": {
    "name": "Anurag Kapila",
    "email": "akapila@cs.cmu.edu",
    "linkedin": "http://linkedin.com/in/anurag-kapila",
    "title": "Mathematics & Computer Science Student",
    "bio": "Passionate about machine learning, deep learning, and computational research. Currently pursuing B.S. in Mathematics and Computer Science at Carnegie Mellon University with a focus on AI applications in healthcare and enterprise solutions.",
    "profileImage": "",
    "links": [
      {
        "name": "Email",
        "url": "mailto:akapila@cs.cmu.edu",
        "icon": "‚úâÔ∏è"
      },
      {
        "name": "LinkedIn",
        "url": "http://linkedin.com/in/anurag-kapila",
        "icon": "üîó"
      },
      {
        "name": "GitHub",
        "url": "https://github.com/anu-kap",
        "icon": "üíª"
      }
    ]
  },
  "education": {
    "degree": "B.S. Mathematics and Computer Science",
    "school": "Carnegie Mellon University",
    "location": "Pittsburgh, PA",
    "graduation": "May 2027",
    "gpa": "3.7/4.0",
    "coursework": [
      "Probability and Computing",
      "Intro to Computer Systems", 
      "Constructive Logic",
      "Principles of Imperative Computation",
      "Principles of Functional Programming",
      "Putnam Seminar",
      "Multivariable Calculus"
    ]
  },
  "experience": [
    {
      "id": "greychain",
      "title": "Machine Learning Intern",
      "company": "Grey Chain AI",
      "period": "July 2025 - August 2025",
      "summary": "Built enterprise-grade FastAPI for document metadata extraction using custom RAG pipeline",
      "description": "Developed a comprehensive document processing solution from scratch, implementing advanced OCR techniques with PyTesseract for data ingestion. Created a custom RAG (Retrieval Augmented Generation) pipeline with model-agnostic retrieval capabilities, preset to Gemini 2.5 Flash for optimal performance. The FastAPI backend was designed for enterprise-scale document metadata extraction with high accuracy and efficiency, processing thousands of documents daily.",
      "technologies": ["FastAPI", "PyTesseract", "RAG", "Gemini 2.5 Flash", "OCR", "Python", "Document Processing", "Enterprise AI"],
      "links": [
        {
          "name": "Company Website",
          "url": "https://greychain.ai",
          "icon": "üåê"
        }
      ],
      "media": {
        "images": [],
        "videos": []
      }
    },
    {
      "id": "packed",
      "title": "Software Development Engineer Intern",
      "company": "Packed AI", 
      "period": "May 2025 ‚Äì July 2025",
      "summary": "Enhanced AI search capabilities through RAG implementation and built scalable cloud infrastructure",
      "description": "Focused on improving AI-powered search functionality by implementing Retrieval Augmented Generation (RAG) systems that increased search accuracy by 40%. Built automated SQL command generation tools for seamless database integration, reducing manual query writing time by 60%. Deployed scalable applications using AWS cloud services and Docker containerization, ensuring robust production environments capable of handling enterprise-level traffic with 99.9% uptime.",
      "technologies": ["RAG", "SQL", "AWS", "Docker", "Python", "Database Integration", "Cloud Architecture", "Microservices"],
      "links": [
        {
          "name": "Company LinkedIn",
          "url": "https://linkedin.com/company/packed-ai",
          "icon": "üîó"
        }
      ],
      "media": {
        "images": [],
        "videos": []
      }
    },
    {
      "id": "cmu_research",
      "title": "Deep Learning Researcher",
      "company": "Carnegie Mellon University",
      "period": "December 2024 - Present",
      "summary": "Research Assistant in Dr. Oana Carja's lab developing AI for medical diagnostics",
      "description": "Working on cutting-edge medical AI applications, specifically developing CNN architectures for blood vessel segmentation in H&E-stained histological images with 95% accuracy. Created computational models for cfDNA (cell-free DNA) fragmentation to generate synthetic training data, expanding available datasets by 300%. Currently building PyTorch neural networks for automated tumor detection, combining computer vision with medical diagnostics to assist pathologists in early cancer detection.",
      "technologies": ["CNN", "PyTorch", "Medical Imaging", "H&E Staining", "cfDNA", "Computer Vision", "Healthcare AI", "Pathology"],
      "links": [
        {
          "name": "Research Lab",
          "url": "https://cbd.cmu.edu/people/carja.html",
          "icon": "üî¨"
        },
        {
          "name": "Department",
          "url": "https://cbd.cmu.edu",
          "icon": "üèõÔ∏è"
        }
      ],
      "media": {
        "images": [],
        "videos": []
      }
    },
    {
      "id": "nexus",
      "title": "AI Program Instructor", 
      "company": "Nexus AI (Remote)",
      "period": "March 2025 - July 2025",
      "summary": "Taught comprehensive AI curriculum covering LLMs, CNNs, GANs to 100+ students",
      "description": "Designed and delivered comprehensive AI education program covering Large Language Models, Convolutional Neural Networks, Generative Adversarial Networks, and multimodal AI systems to over 100 students across multiple cohorts. Created hands-on projects utilizing OpenAI and LangChain APIs, with 95% student completion rate. Provided mentorship in deep learning frameworks including PyTorch and TensorFlow, helping students build practical AI applications and secure internships at major tech companies.",
      "technologies": ["LLMs", "CNNs", "GANs", "OpenAI API", "LangChain", "PyTorch", "TensorFlow", "Education Technology", "Curriculum Design"],
      "links": [
        {
          "name": "Nexus AI Program",
          "url": "#",
          "icon": "üéì"
        }
      ],
      "media": {
        "images": [],
        "videos": []
      }
    },
    {
      "id": "duke",
      "title": "Computational Chemistry Researcher",
      "company": "Duke University",
      "period": "May 2023 - December 2023", 
      "summary": "Analyzed protein-ligand binding using K* algorithm and OSPREY computational suite",
      "description": "Collaborated with Duke Ph.D. candidates on advanced computational chemistry research, focusing on drug discovery applications. Applied the K* algorithm from the OSPREY computational suite to analyze molecular binding interactions of various trypsin complexes, achieving 15% improvement in binding affinity predictions. Performed extensive ligand mutation simulations to optimize binding affinity and developed novel methods to improve prediction accuracy for protein-ligand interactions, contributing to potential therapeutic developments.",
      "technologies": ["OSPREY Suite", "K* Algorithm", "Molecular Modeling", "Ligand Simulation", "Computational Chemistry", "Drug Discovery", "Protein Analysis"],
      "links": [
        {
          "name": "Duke Chemistry",
          "url": "https://chemistry.duke.edu/",
          "icon": "üß™"
        },
        {
          "name": "OSPREY Project",
          "url": "https://github.com/donaldlab/OSPREY3",
          "icon": "üíª"
        }
      ],
      "media": {
        "images": [],
        "videos": []
      }
    }
  ],
  "awards": [
    {
      "id": "hrt_hackathon",
      "title": "HRT x CMU Hackathon - 2nd Place Grand Prize",
      "date": "November 2024",
      "summary": "2nd place out of 129 participants in prestigious hackathon competition",
      "description": "Achieved 2nd place in the prestigious Hudson River Trading x Carnegie Mellon School of Computer Science Hack 112 Competition, competing against 129 talented participants from top universities. Developed an innovative multiplayer game that leveraged advanced graph theory concepts and implemented the Breadth-First Search algorithm to compute optimal shortest paths between actors (represented as nodes in the graph). The solution demonstrated both technical excellence and creative problem-solving, impressing judges with its algorithmic efficiency and user experience design.",
      "technologies": ["Graph Theory", "BFS Algorithm", "Game Development", "Algorithm Design", "JavaScript", "Real-time Systems"],
      "links": [
        {
          "name": "Competition Details",
          "url": "https://hack112.org",
          "icon": "üèÜ"
        },
        {
          "name": "Hudson River Trading",
          "url": "https://www.hudsonrivertrading.com/",
          "icon": "üè¢"
        }
      ],
      "media": {
        "images": [],
        "videos": []
      }
    },
    {
      "id": "usnco", 
      "title": "3X USNCO National Honors Distinction",
      "date": "October 2020 - February 2024",
      "summary": "Top 150 nationally in U.S. National Chemistry Olympiad for three consecutive years",
      "description": "Consistently achieved Honors Distinction (Top 150 nationally) three times in the highly competitive U.S. National Chemistry Olympiad, demonstrating exceptional chemistry knowledge and problem-solving abilities. Ranked in the top 2 at school level and successfully advanced to national rounds each year, which included rigorous multiple choice, free-response, and hands-on laboratory practical sections. This recognition placed me among the nation's most promising young chemists and demonstrated my ability to excel in high-pressure academic competitions.",
      "technologies": ["Analytical Chemistry", "Organic Chemistry", "Physical Chemistry", "Laboratory Techniques", "Competitive Problem Solving"],
      "links": [
        {
          "name": "USNCO Official",
          "url": "https://www.acs.org/content/acs/en/education/students/highschool/olympiad.html",
          "icon": "üß™"
        },
        {
          "name": "American Chemical Society",
          "url": "https://www.acs.org/",
          "icon": "üèõÔ∏è"
        }
      ],
      "media": {
        "images": [],
        "videos": []
      }
    }
  ],
  "skills": {
    "programming": [
      "Python", "Java", "C", "C++", "JavaScript", "HTML", "CSS", "SML", "SQL", "R", "MATLAB"
    ],
    "frameworks": [
      "TensorFlow", "PyTorch", "React", "Flask", "FastAPI", "Node.js", "Express", "Django", "NumPy", "Pandas", "Scikit-learn"
    ],
    "specialties": [
      "Retrieval-Augmented Generation (RAG)",
      "PyTorch Neural Network Modeling", 
      "SQL Database Management",
      "Machine Learning",
      "Deep Learning",
      "Computer Vision",
      "Natural Language Processing",
      "Medical AI Applications",
      "Enterprise AI Solutions"
    ],
    "tools": [
      "AWS", "Docker", "Git", "OCR Technologies", "OSPREY Suite", "Jupyter Notebooks", "VS Code", "Linux", "OpenAI API", "LangChain"
    ]
  },
  "projects": [
    {
      "id": "globalmithackathon",
      "title": "Global MIT Hackathon - Protein Fold Sandbox",
      "summary": "We built a Flask + ColabFold + EquiBind protein sandbox that takes amino acid FASTA input, predicts 3D structure with alphafold2_ptm_model, compares sequences via Smith‚ÄìWaterman (BLOSUM62), and visualizes results in 3Dmol.js.",
      "description": "For the Global MIT Hackathon, our team built a Protein Fold Sandbox where users can input an amino acid sequence and explore its predicted 3D structure, compare it to other proteins, and even analyze ligand binding. The backend uses a Flask API to process sequences in FASTA format, runs ColabFold with the alphafold2_ptm_model to generate .pdb structures, and renders them interactively in the browser using 3Dmol.js. We added a Smith‚ÄìWaterman local alignment with BLOSUM62 scoring for protein similarity search, plus EquiBind integration for predicting ligand‚Äìprotein binding sites and energies.",
      "technologies": ["Colab Fold (Alpha Fold 2)", "Equibind", "Flask"],
      "links": [
        {
          "name": "GitHub Repository",
          "url": "https://github.com/yuvvantalreja/mini-alphafold",
          "icon": "üíª"
        }
      ],
      "media": {
        "images": [
          "path/to/screenshot1.jpg",
          "path/to/screenshot2.png"
        ],
        "videos": [
          "path/to/demo-video.mp4"
        ]
      }
    },
    {
      "id": "docapi",
      "title": "Retrieval Augmented Generation (RAG) - Doc Metadata Extractor",
      "summary": "Custom, comprehensive RAG pipeline that extracts, chunks, embeds, and intelligently extracts structured parameters from PDFs using advanced text processing and vector retrieval technologies.",
      "description": "Implemented a retrieval-augmented generation (RAG) pipeline designed to extract, chunk, and embed text data primarily from PDFs, facilitating efficient document search and parameter extraction. It leverages advanced PDF parsing (including multi-column layout detection via pymupdf and unstructured io), builds document chunks for retrieval, and applies a sophisticated regex-based parameter extraction method that intelligently handles multi-line and noisy text data. The pipeline also supports integration with embedding models (sentence_transformers), vector databases (chromadb), and generative AI (google.genai) for downstream retrieval and generation tasks.",
      "technologies": ["Chroma", "Hugging Face Sentence Transformer", "Google Genai", "Chromadb"],
      "links": [
        {
          "name": "GitHub Repository",
          "url": "https://github.com/Anu-GreyChain/doc_api",
          "icon": "üíª"
        }
      ],
      "media": {
        "images": [
          "path/to/screenshot1.jpg",
          "path/to/screenshot2.png"
        ],
        "videos": [
          "path/to/demo-video.mp4"
        ]
      }
    },
    {
      "id": "bloodseg",
      "title": "Mask R-CNN - Blood Vessel Segmentation ",
      "summary": "Trained a custom Mask R-CNN (ResNet-50 FPN) in Detectron2 on a COCO-format dataset, using Python, OpenCV, and Google Colab to fine-tune for object detection and instance segmentation",
      "description": "Built a custom object detection and instance segmentation pipeline using Meta's Detectron2 for an H&E stained tissue dataset from AHN and annotated in COCO format. The system uses Facebook AI‚Äôs Mask R-CNN model with a ResNet-50 FPN backbone, fine-tuned on our images for specialized object recognition. We registered our training and validation sets with register_coco_instances, visualized annotations with Detectron2‚Äôs Visualizer, and trained the model in Google Colab with custom learning rates, batch sizes, and iteration limits. The trained model can detect and segment our target classes with high precision, making it adaptable for real-world computer vision tasks.",
      "technologies": ["Mask R-CNN", "Meta Detectron2", "OpenCV"],
      "links": [
        {
          "name": "GitHub Repository",
          "url": "https://github.com/anu-kap/Blood-Vessel-Segmentation-Model/tree/main",
          "icon": "üíª"
        }
      ],
      "media": {
        "images": [
          "path/to/screenshot1.jpg",
          "path/to/screenshot2.png"
        ],
        "videos": [
          "path/to/demo-video.mp4"
        ]
      }
    },
    {
      "id": "hackcmu",
      "title": "Hack CMU - Hiking Companion App",
      "summary": "Built a Flask + SQLite backend with a TensorFlow/Keras VGG16 model that lets hikers snap a photo, get the animal identified, and log sightings with GPS data and a leaderboard.",
      "description": "For HackCMU, my team built a Hiking Companion app that helps people figure out what animals they spot on the trail. When you take a photo in the app, it gets sent to our Flask server, which saves the picture and location in a SQLite database and runs it through an animal recognition model we trained with TensorFlow and Keras. The model uses a VGG16 neural network we fine-tuned with a bunch of animal images, plus data augmentation and other tricks so it works better in real-life hiking conditions. We also made it track sightings over time and keep a leaderboard so hikers can see who‚Äôs spotted the most wildlife.",
      "technologies": ["Flask", "SQLite", "Tensor Flow"],
      "links": [
        {
          "name": "GitHub Repository (frontend)",
          "url": "https://github.com/anu-kap/hackCMU24",
          "icon": "üíª"
        }
      ],
      "media": {
        "images": [
          "path/to/screenshot1.jpg",
          "path/to/screenshot2.png"
        ],
        "videos": [
          "path/to/demo-video.mp4"
        ]
      }
    }
  ]
}
